var codes = require("./codes").dictionary;
var firebaseModule = require('../../modules/firebase/firebaseClient');
var firebase = new firebaseModule.Firebase();

function Packet(packet) {
  this.packet = packet;
  this.anomaly = false;
  
  var CDMAdevice = packet.substring(0,22) === "7e00290000001463100028"
  var GSMdevice = packet.substring(0,22) === "7e0029000100a100004b90"
  if ( !CDMAdevice && !GSMdevice ) {
    this.anomaly = true;
    this.anomalyMessage = "Unrecognized device.";
  }

  this.hardwareId = packet.substring(22,26);
  //this.temperature = packet.substring(length-2, length);
  this.event = codes[packet.substring(26,28)];
  
  if (this.event === null || this.event === "Unknown") {
    this.anomaly = true;
    this.anomalyMessage = "This packet has an event type of '" + packet.substring(26,28) + "', which is null or Unknown.";
  }
  
  if (this.anomaly === false && this.event !== "Maintenance") {
    this.device();
  }
}

Packet.prototype.device = function() {

  var record = firebase.queryData('devices', {
    orderBy: 'hardwareId',
    equalTo: this.hardwareId
  });
  
  if ( Object.keys(record).length === 0 ) {
    record = {
      hardwareId: this.hardwareId,
      isNew: true
    };
    var newRecord = firebase.postData('devices', record);
    this.key = newRecord.name;
  } else {
	this.key = Object.keys(record)[0];
    record = record[this.key];
  }
  this.record = record;
  return record;
};

Packet.prototype.updateDevice = function() {
  this.record.status = this.event;
  this.record.updatedAt = new Date();
  var endpoint = 'devices/' + this.key;
  firebase.putData(endpoint, this.record);
};

Packet.prototype.recordKeen = function() {
  var time = require('../../modules/utils/time');
  var device = this.record;
  var duration = time.secondsAgo(device.updatedAt);
  var keenModule = require('../../modules/keenio/keenioclient');
  var keen = new keenModule.Keenio("5785561b383144258cf97520");
  keen.recordEvent({
    collection: "device",
    data: {
      device: device,
      event: device.status,
      duration: duration,
      deviceId: device.key,
      packet: this.packet
    }
  });
};