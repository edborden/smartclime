 var http = require("http");

/**
 * A generic http client that handles the communication with remote APIs
 * @class Client
 * @constructor Client
 */
function HttpClient() {}

HttpClient.prototype.callApi = function(params) {
  
  try {   
     return this._callApi(params);
  } catch(response) {
     this._handleError(response);    
  }
};

HttpClient.prototype._callApi = function(params) {
  
  params.headers = { "Content-Type": "application/json" };
  
  //console.log(JSON.stringify(params));
  var response = http.request(params);
  //console.log("Received following response  : " + JSON.stringify(response));
  if (response.status >= "200" && response.status < "300") {
    if (response.body && response.body !== 'null') {
      var responseBody = JSON.parse(response.body);
      if (responseBody.message) {
        throw response;
      } else {
        return responseBody;
      }
    }
    else {
      return response;
    }
  } else {
    throw response;
  }
};
  
HttpClient.prototype._handleError = function(response) {
   
  var errorObj = "";
  try {
    
    errorObj = JSON.parse(response.body);
  }catch(e) {
    
    try {
      errorObj = JSON.parse(response);
    }catch(e) {
      errorObj = response;
    }
  };

  throw {
    "errorCode": "Invocation_Error",
    "errorDetail": errorObj
  };
};

/*
 * Transform all Numeric and boolean parameters to string so they can be passed to http.callApi
 * (shallow only)
 */
HttpClient.prototype._paramsToString = function(params) {
  
  var newParams = {};
  for (var p in params) {
    
    if (typeof(params[p]) != "object") {
    	newParams[p] = "" +  params[p];
    }else {
      newParams[p] = JSON.stringify(params[p]);
    }
  }
  
  return newParams;
};			