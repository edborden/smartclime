var config = require("./config");
var httpClient = require("./firebasehttpclient");

/**
 * This is the main class to use to interact with Firebase
 * @class Firebase
 * @constructor 
 * @param {Object} [dto]
 * @param {String} [dto.projectName] : your Firebase project name. Optional, defaults to config.projectName
 * defaults to config.apiVersion
 */
function Firebase(dto) {
  this.projectName = dto && dto.projectName? dto.projectName: config.projectName;
  this.secret = config.secret;
  
  this.httpClient = new httpClient.HttpClient();
}

/**
 * @method getData
 * @param {String} [tree] : name of the requested data tree. Optional
 * @return {Object} data stored at location
 * @throw {Error} the method can throw exceptions
 */
Firebase.prototype.getData = function(tree) {
  var req = {};

  req.url = this.projectName + tree + ".json";
  req.url = req.url + "?auth=" + this.secret;
  
  req.method = "GET";  
  
  var response  = this.httpClient.callApi(req);
  if (response.timeout) {
    throw {
      errorCode: "Invocation_Error",
      errorDetail: "timeout"
    }
  }
  
  return response;
};

/**
 * @method putData
 * @param {String} [key] : name of the location to save the data.
 * @param {Object,String} [data] : Object or string to save at key
 */
Firebase.prototype.putData = function(key, data) {
  var req = {};

  req.url = this.projectName + key + ".json";
  req.url = req.url + "?auth=" + this.secret;
  req.method = "PUT";
  req.bodyString = JSON.stringify(data);
  
  var http = require('http');
  console.log(JSON.stringify(req));
  var response  = http.request(req);
  
  return response;
};

Firebase.prototype.patchData = function(key, data) {
  var req = {};

  req.url = this.projectName + key + ".json";
  req.url = req.url + "?auth=" + this.secret;
  req.method = "PATCH";
  req.bodyString = JSON.stringify(data);
  
  var http = require('http');
  //console.log(JSON.stringify(req));
  var response  = http.request(req);
  console.log(JSON.stringify(response));
  return response;
};

Firebase.prototype.postData = function(key, data) {
  var req = {};

  req.url = this.projectName + key + ".json";
  req.url = req.url + "?auth=" + this.secret;
  req.method = "POST";
  req.bodyString = JSON.stringify(data);
  
  var response  = this.httpClient.callApi(req);
  if (response.timeout) {
    throw {
      errorCode: "Invocation_Error",
      errorDetail: "timeout"
    }
  }
  
  return response;
};

Firebase.prototype.queryData = function(key, query) {
  var req = {};

  req.url = this.projectName + key + ".json";
  req.url = req.url + "?auth=" + this.secret;
  if (query.orderBy) {
  	req.url = req.url + "&orderBy=%22" + query.orderBy + "%22";
  }
  if (query.equalTo) {
  	req.url = req.url + "&equalTo=%22" + query.equalTo + "%22";
  }
  if (query.limitToLast) {
  	req.url = req.url + "&limitToLast=" + query.limitToLast;
  }
  if (query.limitToFirst) {
  	req.url = req.url + "&limitToFirst" + query.limitToFirst;
  }
  req.method = "GET";
  
  var response  = this.httpClient.callApi(req);
  if (response.timeout) {
    throw {
      errorCode: "Invocation_Error",
      errorDetail: "timeout"
    }
  }
  
  return response;
};

Firebase.prototype.deleteData = function(key) {
  var req = {};

  req.url = this.projectName + key + ".json";
  req.url = req.url + "?auth=" + this.secret;
  req.method = "DELETE";
  
  var response  = this.httpClient.callApi(req);
  if (response.timeout) {
    throw {
      errorCode: "Invocation_Error",
      errorDetail: "timeout"
    }
  }
  
  return response;
};